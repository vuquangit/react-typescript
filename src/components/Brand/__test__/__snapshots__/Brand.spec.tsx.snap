// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Brand Test default Brand 1`] = `
<BrowserRouter>
  <MockedProvider
    addTypename={false}
    cache={
      InMemoryCache {
        "addTypename": true,
        "config": Object {
          "addTypename": true,
          "dataIdFromObject": [Function],
          "resultCaching": true,
          "typePolicies": Object {
            "Query": Object {
              "fields": Object {
                "isLoggedIn": Object {
                  "read": [Function],
                },
                "themeMode": Object {
                  "read": [Function],
                },
                "visibilityFilter": Object {
                  "read": [Function],
                },
              },
            },
          },
        },
        "data": Root {
          "canRead": [Function],
          "data": Object {},
          "getFieldValue": [Function],
          "group": CacheGroup {
            "caching": true,
            "d": [Function],
            "keyMaker": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
          },
          "policies": Policies {
            "cache": [Circular],
            "config": Object {
              "cache": [Circular],
              "dataIdFromObject": [Function],
              "possibleTypes": undefined,
              "typePolicies": Object {
                "Query": Object {
                  "fields": Object {
                    "isLoggedIn": Object {
                      "read": [Function],
                    },
                    "themeMode": Object {
                      "read": [Function],
                    },
                    "visibilityFilter": Object {
                      "read": [Function],
                    },
                  },
                },
              },
            },
            "fuzzySubtypes": Map {},
            "rootIdsByTypename": Object {
              "Mutation": "ROOT_MUTATION",
              "Query": "ROOT_QUERY",
              "Subscription": "ROOT_SUBSCRIPTION",
            },
            "rootTypenamesById": Object {
              "ROOT_MUTATION": "Mutation",
              "ROOT_QUERY": "Query",
              "ROOT_SUBSCRIPTION": "Subscription",
            },
            "supertypeMap": Map {},
            "typePolicies": Object {
              "Query": Object {
                "fields": Object {
                  "isLoggedIn": Object {
                    "keyFn": undefined,
                    "merge": undefined,
                    "read": [Function],
                  },
                  "themeMode": Object {
                    "keyFn": undefined,
                    "merge": undefined,
                    "read": [Function],
                  },
                  "visibilityFilter": Object {
                    "keyFn": undefined,
                    "merge": undefined,
                    "read": [Function],
                  },
                },
                "keyFn": undefined,
              },
            },
            "usingPossibleTypes": false,
          },
          "refs": Object {},
          "rootIds": Object {},
          "sharedLayerGroup": CacheGroup {
            "caching": true,
            "d": [Function],
            "keyMaker": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
          },
          "storageTrie": KeyTrie {
            "makeData": [Function],
            "weakness": true,
          },
          "toReference": [Function],
        },
        "getFragmentDoc": [Function],
        "makeVar": [Function],
        "maybeBroadcastWatch": [Function],
        "optimisticData": Root {
          "canRead": [Function],
          "data": Object {},
          "getFieldValue": [Function],
          "group": CacheGroup {
            "caching": true,
            "d": [Function],
            "keyMaker": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
          },
          "policies": Policies {
            "cache": [Circular],
            "config": Object {
              "cache": [Circular],
              "dataIdFromObject": [Function],
              "possibleTypes": undefined,
              "typePolicies": Object {
                "Query": Object {
                  "fields": Object {
                    "isLoggedIn": Object {
                      "read": [Function],
                    },
                    "themeMode": Object {
                      "read": [Function],
                    },
                    "visibilityFilter": Object {
                      "read": [Function],
                    },
                  },
                },
              },
            },
            "fuzzySubtypes": Map {},
            "rootIdsByTypename": Object {
              "Mutation": "ROOT_MUTATION",
              "Query": "ROOT_QUERY",
              "Subscription": "ROOT_SUBSCRIPTION",
            },
            "rootTypenamesById": Object {
              "ROOT_MUTATION": "Mutation",
              "ROOT_QUERY": "Query",
              "ROOT_SUBSCRIPTION": "Subscription",
            },
            "supertypeMap": Map {},
            "typePolicies": Object {
              "Query": Object {
                "fields": Object {
                  "isLoggedIn": Object {
                    "keyFn": undefined,
                    "merge": undefined,
                    "read": [Function],
                  },
                  "themeMode": Object {
                    "keyFn": undefined,
                    "merge": undefined,
                    "read": [Function],
                  },
                  "visibilityFilter": Object {
                    "keyFn": undefined,
                    "merge": undefined,
                    "read": [Function],
                  },
                },
                "keyFn": undefined,
              },
            },
            "usingPossibleTypes": false,
          },
          "refs": Object {},
          "rootIds": Object {},
          "sharedLayerGroup": CacheGroup {
            "caching": true,
            "d": [Function],
            "keyMaker": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
          },
          "storageTrie": KeyTrie {
            "makeData": [Function],
            "weakness": true,
          },
          "toReference": [Function],
        },
        "policies": Policies {
          "cache": [Circular],
          "config": Object {
            "cache": [Circular],
            "dataIdFromObject": [Function],
            "possibleTypes": undefined,
            "typePolicies": Object {
              "Query": Object {
                "fields": Object {
                  "isLoggedIn": Object {
                    "read": [Function],
                  },
                  "themeMode": Object {
                    "read": [Function],
                  },
                  "visibilityFilter": Object {
                    "read": [Function],
                  },
                },
              },
            },
          },
          "fuzzySubtypes": Map {},
          "rootIdsByTypename": Object {
            "Mutation": "ROOT_MUTATION",
            "Query": "ROOT_QUERY",
            "Subscription": "ROOT_SUBSCRIPTION",
          },
          "rootTypenamesById": Object {
            "ROOT_MUTATION": "Mutation",
            "ROOT_QUERY": "Query",
            "ROOT_SUBSCRIPTION": "Subscription",
          },
          "supertypeMap": Map {},
          "typePolicies": Object {
            "Query": Object {
              "fields": Object {
                "isLoggedIn": Object {
                  "keyFn": undefined,
                  "merge": undefined,
                  "read": [Function],
                },
                "themeMode": Object {
                  "keyFn": undefined,
                  "merge": undefined,
                  "read": [Function],
                },
                "visibilityFilter": Object {
                  "keyFn": undefined,
                  "merge": undefined,
                  "read": [Function],
                },
              },
              "keyFn": undefined,
            },
          },
          "usingPossibleTypes": false,
        },
        "storeReader": StoreReader {
          "config": Object {
            "addTypename": true,
            "cache": [Circular],
          },
          "executeSelectionSet": [Function],
          "executeSubSelectedArray": [Function],
          "knownResults": WeakMap {},
        },
        "storeWriter": StoreWriter {
          "cache": [Circular],
          "reader": StoreReader {
            "config": Object {
              "addTypename": true,
              "cache": [Circular],
            },
            "executeSelectionSet": [Function],
            "executeSubSelectedArray": [Function],
            "knownResults": WeakMap {},
          },
        },
        "txCount": 0,
        "typenameDocumentCache": Map {},
        "watchDep": [Function],
        "watches": Set {},
      }
    }
    mocks={
      Array [
        Object {
          "request": Object {
            "query": Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "getTheme",
                  },
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [
                          Object {
                            "arguments": Array [],
                            "kind": "Directive",
                            "name": Object {
                              "kind": "Name",
                              "value": "client",
                            },
                          },
                        ],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "themeMode",
                        },
                        "selectionSet": undefined,
                      },
                    ],
                  },
                  "variableDefinitions": Array [],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 46,
                "start": 0,
              },
            },
          },
          "result": Object {
            "data": Object {
              "themeMode": "light",
            },
          },
        },
      ]
    }
  >
    <Component
      theme={Object {}}
    >
      <Memo(l) />
      <Brand />
    </Component>
  </MockedProvider>
</BrowserRouter>
`;
